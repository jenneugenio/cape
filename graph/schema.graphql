# isAuthenticated depends on having access to an auth token and checks that the
# auth token is valid and appends the related user and session to the request context.
# Most graphql queries and mutation should be annotated with this except for createLoginSession
# and other exceptions as needed
directive @isAuthenticated(type: TokenType! = AUTHENTICATED) on FIELD_DEFINITION

type AuthCredentials {
  salt: Base64!
  alg: CredentialsAlgType!
}

# ------------------------------------------------------------------
# BEGIN INTERFACES
#
# These are common values on our types
# ------------------------------------------------------------------

interface Identity {
  id: ID!
  email: String!
  created_at: Time!
  updated_at: Time!
}

# ------------------------------------------------------------------
# BEGIN PRIMITIVES
#
# These map to objects in the primitives package
# ------------------------------------------------------------------

type User implements Identity {
  id: ID!
  name: String!
  email: String!
  created_at: Time!
  updated_at: Time!
}

type Session {
  id: ID!
  identity_id: ID!
  expires_at: Time!
  type: TokenType!
  token: Base64!
  credentials: AuthCredentials
}

type Source {
  id: ID!
  label: String!
  endpoint: URL!
}

type Role {
  id: ID!
  label: String!
  created_at: Time!
  updated_at: Time!
}

type Assignment {
  id: ID!
  role: Role!
  identity: Identity!
  created_at: Time!
  updated_at: Time!
}

# ------------------------------------------------------------------
# END PRIMITIVES
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# BEGIN INPUTS
#
# These are used as inputs to mutations
# ------------------------------------------------------------------

input NewUserRequest {
  name: String!
  email: String!
  public_key: Base64!
  salt: Base64!
  alg: CredentialsAlgType!
}

input LoginSessionRequest {
  email: String!
}

input AuthSessionRequest {
  signature: Base64!
}

input DeleteSessionRequest {
  token: Base64!
}

input AddSourceRequest {
  label: String!
  credentials: URL!
}

input CreateRoleRequest {
  label: String!
  identity_ids: [ID!]
}

input DeleteRoleRequest {
  id: ID!
}

input AssignRoleRequest {
  role_id: ID!
  identity_id: ID!
}

# ------------------------------------------------------------------
# END INPUTS
# ------------------------------------------------------------------

type Query {
  user(id: ID!): User!
  users: [User!]

  session: Session!
  sources: [Source!]!
  source(id: ID!): Source!

  role(id: ID!): Role! @isAuthenticated()
  roles: [Role!] @isAuthenticated()
  roleMembers(role_id: ID!): [Identity!] @isAuthenticated()
}

type Mutation {
  setup(input: NewUserRequest!): User!

  createUser(input: NewUserRequest!): User!

  addSource(input: AddSourceRequest!): Source!

  createLoginSession(input: LoginSessionRequest!): Session!
  createAuthSession(input: AuthSessionRequest!): Session! @isAuthenticated(type: LOGIN)
  deleteSession(input: DeleteSessionRequest!): String @isAuthenticated()

  createRole(input: CreateRoleRequest!): Role! @isAuthenticated()
  deleteRole(input: DeleteRoleRequest!): String @isAuthenticated()

  assignRole(input: AssignRoleRequest!): Assignment! @isAuthenticated()
  unassignRole(input: AssignRoleRequest!): String @isAuthenticated()
}

# Scalar definitions

scalar Time
scalar Base64
scalar CredentialsAlgType
scalar TokenType
scalar URL
