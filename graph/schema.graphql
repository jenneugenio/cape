# isAuthenticated depends on having access to an auth token and checks that the
# auth token is valid and appends the related user and session to the request context.
# Most graphql queries and mutation should be annotated with this except for createLoginSession
# and other exceptions as needed
directive @isAuthenticated(type: TokenType! = AUTHENTICATED) on FIELD_DEFINITION

# ------------------------------------------------------------------
# BEGIN PRIMITIVES
#
# These map to objects in the primitives package
# ------------------------------------------------------------------

type User {
  id: ID!
  name: String!
  email: String!
}

type Session {
  id: ID!
  identity_id: ID!
  expires_at: Time!
  type: TokenType!
  token: Base64!
  credentials: AuthCredentials
}

type Source {
  id: ID!
  label: String!
  endpoint: URL!
}

# ------------------------------------------------------------------
# END PRIMITIVES
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# END INPUTS
#
# These are used as inputs to mutations
# ------------------------------------------------------------------

input NewUserRequest {
  name: String!
  email: String!
  public_key: Base64!
  salt: Base64!
  alg: CredentialsAlgType!
}

input LoginSessionRequest {
  email: String!
}

input AuthSessionRequest {
  signature: Base64!
}

type AuthCredentials {
  salt: Base64!
  alg: CredentialsAlgType!
}

input DeleteSessionRequest {
  token: Base64!
}

input AddSourceRequest {
  label: String!
  credentials: URL!
}

# ------------------------------------------------------------------
# END INPUTS
# ------------------------------------------------------------------

type Query {
  user: User!
  session: Session!
  sources: [Source!]!
  source(id: ID!): Source!
}

type Mutation {
  createUser(input: NewUserRequest!): User!
  addSource(input: AddSourceRequest!): Source!

  createLoginSession(input: LoginSessionRequest!): Session!
  createAuthSession(input: AuthSessionRequest!): Session! @isAuthenticated(type: LOGIN)
  deleteSession(input: DeleteSessionRequest!): String @isAuthenticated()
}

scalar Time
scalar Base64
scalar CredentialsAlgType
scalar TokenType
scalar URL
