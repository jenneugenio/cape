on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v12.50.0

name: Upload Release Asset

jobs:
  build:
    name: Build artifacts
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          make
          zip --junk-paths cape-${{ matrix.os }} bin/cape
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: cape-${{ matrix.os }}
          path: cape-${{ matrix.os }}.zip
  release:
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Copy release URL into file
        run: |
          mkdir release
          printf "%s" "${{ steps.create_release.outputs.upload_url }}" > release/url.txt
      - name: Stash file containing the release URL as an artifact
        uses: actions/upload-artifact@v1
        with:
          name: release-url
          path: ./release
  upload:
    name: Upload Assets
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    needs: [build, release]
    steps:
      - name: Download ubuntu artifact
        uses: actions/download-artifact@v1
        with:
          name: cape-${{ matrix.os }}
      - name: Retrieve stashed release URL
        uses: actions/download-artifact@v1
        with:
          name: release-url
      # Write content of downloaded file (a string which contains the release URL) into a step.outputs variable
      - name: Read release URL
        id: get_release_url
        run: echo ::set-output name=URL::$(cat release-url/url.txt)
      - name: Upload Ubuntu Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_url.outputs.URL }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: cape-${{ matrix.os }}/cape-${{ matrix.os }}.zip
          asset_name: cape-${{ matrix.os }}.zip
          asset_content_type: application/zip
  docker:
    name: Upload Docker asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Docker login
        run: docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} docker.pkg.github.com
      - name: Build cape docker image
        run: make docker
      - name: Push cape docker image
        run: RELEASE_CONFIRM=yes make docker-push

  publish:
    name: Publish artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Auth gsutil
        env:
          GCS_SERVICE_ACCOUNT: ${{ secrets.GCS_SERVICE_ACCOUNT }}
        run: |
          echo $GCS_SERVICE_ACCOUNT > key.json
          pip install gsutil
          gcloud config set pass_credentials_to_gsutil false
          (ls key.json; yes) | gsutil config -e
      - name: Install helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
      - name: Run publish
        run: |
          RELEASE_CONFIRM=yes make publish