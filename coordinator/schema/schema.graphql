# isAuthenticated depends on having access to an auth token and checks that the
# auth token is valid and appends the related user and session to the request context.
# Most graphql queries and mutation should be annotated with this except for createLoginSession
# and other exceptions as needed
directive @isAuthenticated(type: TokenType! = AUTHENTICATED) on FIELD_DEFINITION

type AuthCredentials {
  salt: Base64!
  alg: CredentialsAlgType!
}

# ------------------------------------------------------------------
# BEGIN INTERFACES
#
# These are common values on our types
# ------------------------------------------------------------------

interface Identity {
  id: ID!
  email: Email!
  created_at: Time!
  updated_at: Time!
}

# ------------------------------------------------------------------
# BEGIN PRIMITIVES
#
# These map to objects in the primitives package
# ------------------------------------------------------------------

type User implements Identity {
  id: ID!
  name: Name!
  email: Email!
  created_at: Time!
  updated_at: Time!
  roles: [Role!]
}

type Session {
  id: ID!
  identity_id: ID!
  owner_id: ID!
  expires_at: Time!
  type: TokenType!
  token: Base64!
  credentials: AuthCredentials
}

type Source {
  id: ID!
  label: Label!
  type: SourceType!
  endpoint: DBURL!
  credentials: DBURL
  service_id: ID
}

type Assignment {
  id: ID!
  role: Role!
  identity: Identity!
  created_at: Time!
  updated_at: Time!
}

# ------------------------------------------------------------------
# END PRIMITIVES
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# BEGIN INPUTS
#
# These are used as inputs to mutations
# ------------------------------------------------------------------

input NewUserRequest {
  name: Name!
  email: Email!
  public_key: Base64!
  salt: Base64!
  alg: CredentialsAlgType!
}

input EmailLoginSessionRequest {
  email: Email!
}

input TokenLoginSessionRequest {
  token_id: ID!
}

input AuthSessionRequest {
  signature: Base64!
}

input DeleteSessionRequest {
  token: Base64!
}

input AddSourceRequest {
  label: Label!
  credentials: DBURL!
  service_id: ID
}

input RemoveSourceRequest {
  label: Label!
}

# ------------------------------------------------------------------
# END INPUTS
# ------------------------------------------------------------------

type Query {
  user(id: ID!): User!
  users: [User!]

  me: Identity! @isAuthenticated()

  sources: [Source!]! @isAuthenticated()
  source(id: ID!): Source! @isAuthenticated()
  sourceByLabel(label: Label!): Source! @isAuthenticated()

  identities(emails: [Email!]): [Identity!]
}

type Mutation {
  setup(input: NewUserRequest!): User!

  createUser(input: NewUserRequest!): User! @isAuthenticated()
  addSource(input: AddSourceRequest!): Source! @isAuthenticated()
  removeSource(input: RemoveSourceRequest!): String @isAuthenticated()

  createEmailLoginSession(input: EmailLoginSessionRequest!): Session!
  createTokenLoginSession(input: TokenLoginSessionRequest!): Session!

  createAuthSession(input: AuthSessionRequest!): Session! @isAuthenticated(type: LOGIN)
  deleteSession(input: DeleteSessionRequest!): String @isAuthenticated()
}

# Scalar definitions

scalar Time
scalar Base64
scalar CredentialsAlgType
scalar TokenType
scalar URL
scalar DBURL
scalar Name
scalar Label
scalar EmailType
scalar Email
scalar SourceType
