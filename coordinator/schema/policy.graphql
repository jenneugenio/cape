scalar PolicySpec
scalar Rule

type Policy {
  id: ID!
  created_at: Time!
  updated_at: Time!

  label: Label!
  spec: PolicySpec!
}

type Attachment {
  id: ID!
  created_at: Time!
  updated_at: Time!

  role: Role!
  policy: Policy!
}

input CreatePolicyRequest {
  label: Label!
  spec: PolicySpec!
}

input DeletePolicyRequest {
  id: ID!
}

input PolicyInput {
  label: Label!
}

input AttachPolicyRequest {
  policy_id: ID!
  role_id: String!
}

input DetachPolicyRequest {
  policy_id: ID!
  role_id: String!
}

extend type Query {
  policy(id: ID!): Policy! @isAuthenticated()
  policyByLabel(label: Label!): Policy! @isAuthenticated()

  policies: [Policy!] @isAuthenticated()
  rolePolicies(role_id: String!): [Policy!] @isAuthenticated()
  identityPolicies(identity_id: ID!): [Policy!] @isAuthenticated()

  attachment(role_id: String!, policy_id: ID!): Attachment! @isAuthenticated()
}

extend type Mutation {
  createPolicy(input: CreatePolicyRequest!): Policy! @isAuthenticated()
  deletePolicy(input: DeletePolicyRequest!): String @isAuthenticated()

  attachPolicy(input: AttachPolicyRequest!): Attachment! @isAuthenticated()
  detachPolicy(input: DetachPolicyRequest!): String @isAuthenticated()
}
