scalar ProjectStatus
scalar DisplayName
scalar Description

type Project {
    id: ID!
    name: DisplayName!
    label: Label!
    description: Description!
    status: ProjectStatus!
    current_spec: ProjectSpec

    created_at: Time!
    updated_at: Time!
}

type ProjectSpec {
    id: ID!
    project: Project!
    parent: ProjectSpec
    policy: [Rule!]!
    sources: [Source!]!
}

input CreateProjectRequest {
    name: DisplayName!
    label: Label
    Description: Description!
}

input UpdateProjectRequest {
    name: DisplayName
    description: Description
}

input ProjectSpecFile {
    sources: [Label!]!
    policy: [Rule!]!
}

extend type Query {
    projects(status: [ProjectStatus!]): [Project!]! @isAuthenticated
    project(id: ID, label: Label): Project @isAuthenticated
}

extend type Mutation {
    createProject(project: CreateProjectRequest!): Project! @isAuthenticated
    updateProject(id: ID, label: Label, update: UpdateProjectRequest!): Project! @isAuthenticated
    updateProjectSpec(project_label: Label, project_id: ID, request: ProjectSpecFile!): Project! @isAuthenticated

    archiveProject(id: ID, label: Label): Project! @isAuthenticated
    unarchiveProject(id: ID, label: Label): Project! @isAuthenticated
}