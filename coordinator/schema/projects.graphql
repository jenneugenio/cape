scalar ProjectStatus
scalar ProjectDisplayName
scalar ProjectDescription
scalar NamedTransformation
scalar Rule

type Project {
    id: String!
    name: ProjectDisplayName!
    label: ModelLabel!
    description: ProjectDescription!
    status: ProjectStatus!
    current_spec: Policy
    contributors: [Contributor!]!

    created_at: Time!
    updated_at: Time!
}

type Policy {
    id: String!
    project: Project!
    parent: Policy
    transformations: [NamedTransformation!]
    rules: [Rule!]!

    created_at: Time!
    updated_at: Time!
}

type Contributor {
    id: String!
    user: User!
    project: Project!
    role: Role!

    created_at: Time!
    updated_at: Time!
}

input CreateProjectRequest {
    name: ProjectDisplayName!
    label: ModelLabel
    Description: ProjectDescription!
}

input UpdateProjectRequest {
    name: ProjectDisplayName
    description: ProjectDescription
}

input ProjectSpecFile {
    transformations: [NamedTransformation!]
    rules: [Rule!]!
}

extend type Query {
    projects(status: ProjectStatus!): [Project!]!
    project(id: String, label: ModelLabel): Project

    listContributors(project_label: ModelLabel!): [Contributor!]!
}

extend type Mutation {
    createProject(project: CreateProjectRequest!): Project!
    updateProject(id: String, label: ModelLabel, update: UpdateProjectRequest!): Project!
    updateProjectSpec(id: String label: ModelLabel, request: ProjectSpecFile!): Project!

    archiveProject(id: String, label: ModelLabel): Project!
    unarchiveProject(id: String, label: ModelLabel): Project!

    updateContributor(project_label: ModelLabel!, user_email: ModelEmail!, role_label: ModelLabel!): Contributor!
    removeContributor(project_label: ModelLabel!, user_email: ModelEmail!): Contributor!
}