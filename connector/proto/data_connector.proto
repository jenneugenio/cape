
syntax = "proto3";

package cape.proto;

option go_package = "proto";

service DataConnector {
  rpc Query(QueryRequest) returns (stream Record);
}

message QueryRequest {
  string data_source = 1; // Label of the data source we’re targeting
  string query = 2;
}

message Record {
  // Schema is only available on the first message
  Schema schema = 1;

  // Each field value goes over the wire and the number of values maps to the number of fields in the Schema.
  repeated bytes value = 2;
}

enum RecordType {
  DOCUMENT = 0;
}

// Schema contains information
message Schema {
  string data_source = 1; // label of data source data is being returned from
  string target = 2; // the target used to select the collection that we’re returning records from
  RecordType type = 3;
  repeated Field fields = 4;
}

// We need to know the exact field type so the client can convert the data into the appropriate field type.
enum FieldType {
  BIGINT = 0;
  BIGSERIAL = 1;
  BIT = 2;
  VARBIT = 3;
  BOOL = 4;
  BOX = 5;
  BYTEA = 6;
  CHAR = 7;
  VARCHAR = 8;
  CIDR = 9;
  CIRCLE = 10;
  DATE = 11;
  DOUBLE = 12;
  INET = 13;
  INT = 14;
  INTERVAL = 15;
  JSON = 16;
  JSONB = 17;
  LINE = 18;
  LSEG = 19;
  MACADDR = 20;
  MACADDR8 = 21;
  MONEY = 22;
  NUMERIC = 23;
  PATH = 24;
  PGLSN = 25;
  POINT = 26;
  POLYGON = 27;
  REAL = 28;
  SMALLINT = 29;
  SMALLSERIAL = 30;
  SERIAL = 31;
  TEXT = 32;
  TIME = 33;
  TIMETZ = 34;
  TIMESTAMP = 35;
  TIMESTAMPTZ = 36;
  TSQUERY = 37;
  TSVECTOR = 38;
  TXIDSNAPSHOT = 39;
  UUID = 40;
  XML = 41;
}

// Field represents all information about a field including its type, the number of bits or bytes, and the fields name.
message Field {
  FieldType field = 1;
  int64 size = 2; // Provided for fields of a fixed size that’s specified by the schema (e.g. char(8))
  string name = 3;
}
